let accountLastID: number = 0;
interface IAccount {
    accountID: number,
    accountBalance: number,
    getBalance(): number,
    getStatus(): string;
    showStatus(): void;
    depositFunds(amount: number): void,
    withdrawFunds(amount: number): void
}

class Account implements IAccount {
    readonly accountID: number;
    accountBalance: number = 0;
    constructor(startBalance:number) {
        this.accountID = ++accountLastID;
        this.accountBalance = startBalance;
    }
    getBalance() {
        return this.accountBalance;
    }
    getStatus() {
        return `‚Ññ${this.accountID}\n–ë–∞–ª–∞–Ω—Å: ${this.accountBalance} ‚ÇΩ\n‚Äî‚Äî‚Äî\n`;
    }
    showStatus() {
        console.log(this.getStatus());
    }
    depositFunds(amount: number){
        if (amount < 0 ) throw new Error("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è");
        this.accountBalance += amount;
        console.log(`üêñ –ü–æ–ø–æ–ª–Ω–∏–ª–∏ —Å—á—ë—Ç –Ω–∞ ${amount} ‚ÇΩ`);
    }
    withdrawFunds(amount: number): void {
        if (amount < 0 ) throw new Error("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ c–Ω—è—Ç–∏—è");
        if (amount > this.accountBalance) {
            console.log("–ù–∞ —Å—á–µ—Ç—É –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è");
            return;
        }
        this.accountBalance -= amount;
        console.log(`üí∏ –°–Ω—è–ª–∏ —Å —Å—á—ë—Ç–∞ ${amount} ‚ÇΩ`);
    }
}

class DebitAccount extends Account {
    getStatus() {
        return `–î–µ–±–µ—Ç–æ–≤—ã–π —Å—á—ë—Ç ‚Ññ${this.accountID}\n–ë–∞–ª–∞–Ω—Å: ${this.accountBalance} ‚ÇΩ\n‚Äî‚Äî‚Äî\n`;
    }
    //–ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫–∞—è-—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–±–µ—Ç–æ–≤–æ–≥–æ —Å—á—ë—Ç–∞, –Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–¥–∞–Ω–∏—è –æ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–æ–≥–∏–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–ª–∞—Å—Å–µ ¬Ø\_(„ÉÑ)_/¬Ø
}

class CreditAccount extends Account {
    accountLimit: number;
    baseAccountLimit: number;
    constructor(startBalance:number, accountLimit:number) {
        super(startBalance);
        this.baseAccountLimit = accountLimit;
        this.accountLimit = accountLimit;
    }
    getStatus() {
        return `–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å—á—ë—Ç ‚Ññ${this.accountID}\n–õ–∏–º–∏—Ç: ${this.accountLimit} ‚ÇΩ\n${this.accountBalance > 0 ? "–ë–∞–ª–∞–Ω—Å:" : "–î–æ–ª–≥:"} ${Math.abs(this.accountBalance)} ‚ÇΩ\n‚Äî‚Äî‚Äî\n`;
    }
    withdrawFunds(amount: number): void {
        if (amount < 0 ) throw new Error("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ c–Ω—è—Ç–∏—è");
        if (amount > this.accountLimit) {
            console.log("–õ–∏–º–∏—Ç –Ω–∞ —Å–Ω—è—Ç–∏–µ –∏—Å—á–µ—Ä–ø–∞–Ω");
            return;
        }
        this.accountLimit -= amount;
        this.accountBalance -= amount;
        console.log(`üí∏ –°–Ω—è–ª–∏ —Å —Å—á—ë—Ç–∞ ${amount} ‚ÇΩ`);
    }
    refreshAccountLimit():void {
        this.accountLimit = this.baseAccountLimit;
    }
}

export {DebitAccount, CreditAccount};